## START: Set by rpmautospec
## (rpmautospec version 0.2.5)
%define autorelease(e:s:pb:) %{?-p:0.}%{lua:
    release_number = 3;
    base_release_number = tonumber(rpm.expand("%{?-b*}%{!?-b:1}"));
    print(release_number + base_release_number - 1);
}%{?-e:.%{-e*}}%{?-s:.%{-s*}}%{?dist}
## END: Set by rpmautospec

# Generated by go2rpm 1
%bcond_without check
%global build_timestamp %(date +"%Y%m%d")

# github.com/MetaCubeX/Clash.Meta
%global goipath         github.com/MetaCubeX/Clash.Meta
Version:                1.13.2

%gometa

%global common_description %{expand:
Another Clash Kernel by MetaCubeX.}

%global golicenses      LICENSE
%global godocs          docs README.md

Name:           clash-meta
Release:        %autorelease
Summary:        Another Clash Kernel by MetaCubeX

License:        GPLv3
URL:            %{gourl}
Source0:        %{gosource}
Source1:        https://github.com/valig5/fedora/raw/main/clash-meta/clash-meta.service
Source2:        https://github.com/valig5/fedora/raw/main/clash-meta/clash-meta@.service

BuildRequires:  systemd-rpm-macros

BuildRequires:  golang(github.com/Dreamacro/go-shadowsocks2/core)
BuildRequires:  golang(github.com/Dreamacro/go-shadowsocks2/shadowaead)
BuildRequires:  golang(github.com/Dreamacro/go-shadowsocks2/shadowstream)
BuildRequires:  golang(github.com/go-chi/chi/v5)
BuildRequires:  golang(github.com/go-chi/cors)
BuildRequires:  golang(github.com/go-chi/render)
BuildRequires:  golang(github.com/gofrs/uuid)
BuildRequires:  golang(github.com/gorilla/websocket)
BuildRequires:  golang(github.com/insomniacslk/dhcp/dhcpv4)
BuildRequires:  golang(github.com/miekg/dns)
BuildRequires:  golang(github.com/oschwald/geoip2-golang)
BuildRequires:  golang(github.com/sirupsen/logrus)
BuildRequires:  golang(go.etcd.io/bbolt)
BuildRequires:  golang(go.uber.org/atomic)
BuildRequires:  golang(go.uber.org/automaxprocs/maxprocs)
BuildRequires:  golang(golang.org/x/crypto/argon2)
BuildRequires:  golang(golang.org/x/crypto/chacha20poly1305)
BuildRequires:  golang(golang.org/x/net/http2)
BuildRequires:  golang(golang.org/x/net/publicsuffix)
BuildRequires:  golang(golang.org/x/sync/singleflight)
BuildRequires:  golang(golang.org/x/sys/unix)
BuildRequires:  golang(gopkg.in/yaml.v2)

%if %{with check}
# Tests
BuildRequires:  golang(github.com/docker/docker/api/types)
BuildRequires:  golang(github.com/docker/docker/api/types/container)
BuildRequires:  golang(github.com/docker/docker/client)
BuildRequires:  golang(github.com/docker/go-connections/nat)
BuildRequires:  golang(github.com/stretchr/testify/assert)
%endif


%description
%{common_description}

%gopkg

%prep
%goprep
chmod -x docs/logo.png

%build
export GOLDFLAGS="-X github.com/MetaCubeX/Clash.Meta/constant.Version=%{version} \
                -X github.com/MetaCubeX/Clash.Meta/constant.BuildTime=%{build_timestamp}"
%gobuild -o %{gobuilddir}/bin/clash-meta %{goipath}

%install
%gopkginstall
install -m 0755 -vd                     %{buildroot}%{_bindir}
install -m 0755 -vd                     %{buildroot}%{_userunitdir}
install -m 0755 -vd                     %{buildroot}%{_unitdir}

install -m 0755 -vp %{gobuilddir}/bin/* %{buildroot}%{_bindir}/
install -m 0755 -vp %{S:1}              %{buildroot}%{_userunitdir}/
install -m 0755 -vp %{S:2}              %{buildroot}%{_unitdir}/

%if %{with check}
%check
# some ckecks needs docker daemon and networking
# so we need to ignore the result of tests
# but we can leave the left part running to see
# the results.
%gocheck ||:
%endif

%post
%systemd_user_post clash-meta.service
%systemd_post clash-meta@.service

%preun
%systemd_user_preun clash-meta.service
# disable --now seems don't work here.
if [ $1 -eq 0 ] && [ -x /usr/bin/systemctl ] ; then
        # Package removal, not upgrade
        /usr/bin/systemctl --no-reload stop clash-meta@*.service || :
        /usr/bin/systemctl --no-reload disable clash-meta@.service || :
fi

%postun
%systemd_user_postun_with_restart clash-meta.service
%systemd_postun_with_restart clash-meta@*.service

%files
%license LICENSE
%doc docs README.md
%{_bindir}/clash-meta
%{_userunitdir}/clash-meta.service
%{_unitdir}/clash-meta@.service
%gopkgfiles

%changelog